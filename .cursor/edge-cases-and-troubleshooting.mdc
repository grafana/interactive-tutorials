---
alwaysApply: true
---

# Edge Cases and Troubleshooting for AI

## Common Edge Cases

### DOM Timing Issues

#### Problem: Element Not Found
**Cause**: Interactive action executes before DOM element is rendered
**Solution**: Include appropriate requirements and verification

```html
<!-- Bad: No existence check -->
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="Save dashboard">
  Save dashboard
</li>

<!-- Good: Includes existence check -->
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="Save dashboard"
    data-requirements="exists-reftarget,on-page:/dashboard/edit">
  Save dashboard
</li>
```

#### Problem: Navigation Menu Not Open
**Cause**: Trying to interact with navigation elements when menu is closed
**Solution**: Always include `navmenu-open` requirement for nav interactions

```html
<!-- Bad: Navigation element without menu requirement -->
<li class="interactive" 
    data-targetaction="highlight" 
    data-reftarget="a[href='/connections']">
  Click Connections
</li>

<!-- Good: Includes navigation requirement -->
<li class="interactive" 
    data-targetaction="highlight" 
    data-reftarget="a[href='/connections']"
    data-requirements="navmenu-open,exists-reftarget">
  Click Connections
</li>
```

### Permission and Access Issues

#### Problem: Admin Actions for Non-Admin Users
**Cause**: Tutorial requires admin permissions but user doesn't have them
**Solution**: Make admin steps skippable or provide alternative paths

```html
<!-- Option 1: Make skippable -->
<li class="interactive" 
    data-targetaction="navigate" 
    data-reftarget="/admin/plugins"
    data-requirements="is-admin"
    data-skippable="true"
    data-hint="Admin access required - skip if you don't have permissions">
  Access plugin management (admin only)
</li>

<!-- Option 2: Provide alternative -->
<li class="interactive" 
    data-targetaction="highlight" 
    data-reftarget="div[data-testid='plugin-catalog']"
    data-requirements="has-role:viewer"
    data-doit="false">
  <span class="interactive-comment">
    You can browse plugins here, but <strong>installation requires admin privileges</strong>. 
    Contact your administrator to request plugin installations.
  </span>
  Browse available plugins (view-only)
</li>
```

#### Problem: Data Source Dependencies
**Cause**: Tutorial assumes specific data source exists
**Solution**: Use objectives for auto-completion or include setup sections

```html
<!-- Option 1: Auto-complete if exists -->
<span id="setup-prometheus" 
      class="interactive" 
      data-targetaction="sequence"
      data-objectives="has-datasource:type:prometheus"
      data-hint="Skips if Prometheus already configured">
  <!-- Setup steps only run if Prometheus not configured -->
</span>

<!-- Option 2: Check before dependent actions -->
<li class="interactive" 
    data-targetaction="formfill" 
    data-reftarget="textarea[data-testid='query-editor']"
    data-targetvalue="up"
    data-requirements="has-datasource:prometheus,exists-reftarget">
  Enter Prometheus query
</li>
```

### Form Interaction Issues

#### Problem: React Controlled Inputs
**Cause**: React controlled inputs don't update with simple value assignment
**Solution**: System handles this automatically, but verify with `data-verify`

```html
<!-- Good: Includes verification -->
<li class="interactive" 
    data-targetaction="formfill" 
    data-reftarget="input[data-testid='dashboard-title']"
    data-targetvalue="My Dashboard"
    data-requirements="exists-reftarget"
    data-verify="has-dashboard-named:My Dashboard">
  Set dashboard title
</li>
```

#### Problem: ARIA Combobox Complexity
**Cause**: ARIA comboboxes require special tokenization and event handling
**Solution**: Use formfill action - system handles tokenization automatically

```html
<!-- Complex query tokenization handled automatically -->
<li class="interactive" 
    data-targetaction="formfill" 
    data-reftarget="input[role='combobox'][aria-autocomplete='list']"
    data-targetvalue='job="prometheus" level="error"'
    data-requirements="exists-reftarget,on-page:/explore">
  Filter logs by job and level
</li>
```

#### Problem: Monaco Editor Special Handling
**Cause**: Monaco editors need special event handling for React integration
**Solution**: System detects Monaco editors automatically

```html
<!-- Monaco editor automatically detected by CSS classes -->
<li class="interactive" 
    data-targetaction="formfill" 
    data-reftarget="textarea.inputarea.monaco-mouse-cursor-text"
    data-targetvalue="rate(http_requests_total[5m])"
    data-requirements="exists-reftarget">
  Enter PromQL query
</li>
```

### Navigation and Routing Issues

#### Problem: SPA Navigation Timing
**Cause**: Navigation completes but target page content not yet loaded
**Solution**: Use verification to confirm page content is ready

```html
<!-- Good: Verifies navigation completed -->
<li class="interactive" 
    data-targetaction="navigate" 
    data-reftarget="/dashboard/new"
    data-requirements="has-datasources"
    data-verify="on-page:/dashboard/new,exists-reftarget">
  Navigate to create dashboard
</li>

<!-- Follow-up action waits for page content -->
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="Add visualization"
    data-requirements="exists-reftarget,on-page:/dashboard/new">
  Add your first panel
</li>
```

#### Problem: External URL Handling
**Cause**: External URLs might be blocked by browser security
**Solution**: Use navigate action - system opens in new tab safely

```html
<!-- External URLs handled automatically -->
<li class="interactive" 
    data-targetaction="navigate" 
    data-reftarget="https://grafana.com/docs/"
    data-hint="Opens documentation in new tab">
  View Grafana documentation
</li>
```

## Troubleshooting Patterns

### Debugging Failed Requirements

#### Network/API Issues
```html
<!-- Include fallback for network failures -->
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="Test connection"
    data-requirements="exists-reftarget"
    data-skippable="true"
    data-hint="Skip if network connectivity issues">
  Test data source connection (skip if network issues)
</li>
```

#### Plugin Availability Issues
```html
<!-- Handle missing plugins gracefully -->
<li class="interactive" 
    data-targetaction="navigate" 
    data-reftarget="/a/custom-plugin/"
    data-requirements="has-plugin:custom-plugin"
    data-skippable="true"
    data-hint="Requires custom plugin - skip if not installed">
  Use custom plugin features
</li>

<!-- Alternative without plugin -->
<li class="interactive" 
    data-targetaction="navigate" 
    data-reftarget="/dashboards"
    data-hint="Standard dashboards work without additional plugins">
  Use standard Grafana dashboards instead
</li>
```

### Selector Reliability Issues

#### Problem: Element Selector Changes
**Cause**: Grafana UI updates change DOM structure or attributes
**Solution**: Use multiple fallback selectors and stable attributes

```html
<!-- Primary selector with fallbacks -->
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="Save dashboard"
    data-requirements="exists-reftarget">
  Save dashboard
</li>

<!-- If button text changes, use attribute selector -->
<li class="interactive" 
    data-targetaction="highlight" 
    data-reftarget="button[data-testid='save-dashboard']"
    data-requirements="exists-reftarget">
  Save dashboard using stable selector
</li>
```

#### Problem: Multiple Element Matches
**Cause**: Selector matches multiple elements when only one intended
**Solution**: Use more specific selectors or pseudo-selectors

```html
<!-- Bad: Might match multiple panels -->
<li class="interactive" 
    data-targetaction="highlight" 
    data-reftarget="div[data-testid='panel']">
  Edit panel
</li>

<!-- Good: Targets specific panel -->
<li class="interactive" 
    data-targetaction="highlight" 
    data-reftarget="div[data-testid='panel']:first-of-type">
  Edit the first panel
</li>

<!-- Better: Use unique identifier if available -->
<li class="interactive" 
    data-targetaction="highlight" 
    data-reftarget="div[data-panel-id='panel-1']">
  Edit panel 1
</li>
```

### Sequential Flow Issues

#### Problem: Steps Out of Order
**Cause**: User completes steps manually outside tutorial flow
**Solution**: Use objectives to handle already-completed states

```html
<!-- Auto-complete if already done -->
<li class="interactive" 
    data-targetaction="formfill" 
    data-reftarget="input[id='datasource-name']"
    data-targetvalue="prometheus"
    data-objectives="has-datasource:prometheus"
    data-requirements="exists-reftarget">
  Name your data source
</li>
```

#### Problem: Section Dependencies
**Cause**: User tries to do section 2 before completing section 1
**Solution**: Use section-completed requirements

```html
<span id="section-2" 
      class="interactive" 
      data-targetaction="sequence"
      data-requirements="section-completed:section-1"
      data-hint="Complete the previous section first">
  <!-- Section 2 content -->
</span>
```

### Performance and Scalability Issues

#### Problem: Too Many Requirements Checks
**Cause**: Complex requirements causing performance issues
**Solution**: Group related requirements and use caching

```html
<!-- Good: Grouped related requirements -->
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="Create dashboard"
    data-requirements="has-datasources,has-role:editor,on-page:/dashboards"
    data-hint="Groups related checks efficiently">
  Create new dashboard
</li>

<!-- Bad: Separate similar checks -->
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="Create dashboard"
    data-requirements="has-datasource:prometheus">
  Step 1
</li>
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="Save dashboard"
    data-requirements="has-datasource:prometheus">
  Step 2 (redundant check)
</li>
```

#### Problem: Expensive State Checks
**Cause**: Requirements that make expensive API calls
**Solution**: Use objectives for expensive checks that auto-complete

```html
<!-- Use objective for expensive dashboard search -->
<span id="create-dashboard" 
      class="interactive" 
      data-targetaction="sequence"
      data-objectives="has-dashboard-named:Monitoring Dashboard"
      data-hint="Skips creation if dashboard already exists">
  <!-- Creation steps -->
</span>
```

## Error Recovery Strategies

### Graceful Degradation Patterns

#### Network Connectivity Issues
```html
<!-- Primary action with network dependency -->
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="Test connection"
    data-requirements="exists-reftarget"
    data-skippable="true"
    data-hint="Skip if experiencing network connectivity issues">
  Test data source connection
</li>

<!-- Offline alternative -->
<li class="interactive" 
    data-targetaction="highlight" 
    data-reftarget="div[data-testid='connection-status']"
    data-doit="false">
  <span class="interactive-comment">
    If connection testing fails, check your <strong>network connectivity</strong> 
    and <strong>firewall settings</strong>. You can still configure the data source 
    and test the connection later.
  </span>
  Review connection status information
</li>
```

#### Missing Feature Fallbacks
```html
<!-- Modern feature with fallback -->
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="Use query library"
    data-requirements="has-feature:queryLibrary,exists-reftarget"
    data-skippable="true"
    data-hint="Query library feature - skip if not available">
  Use query library (if available)
</li>

<!-- Traditional approach -->
<li class="interactive" 
    data-targetaction="formfill" 
    data-reftarget="textarea[data-testid='query-editor']"
    data-targetvalue="rate(http_requests_total[5m])"
    data-requirements="exists-reftarget">
  Or enter query manually in editor
</li>
```

### Error Message Patterns

#### Helpful Error Messages
```html
<!-- Clear explanation with context -->
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="Create alert"
    data-requirements="has-datasource:prometheus,has-permission:alerting:write"
    data-hint="Requires Prometheus data source and alerting permissions to create alert rules">
  Create monitoring alert
</li>

<!-- Specific guidance for resolution -->
<li class="interactive" 
    data-targetaction="navigate" 
    data-reftarget="/admin/plugins"
    data-requirements="is-admin"
    data-skippable="true"
    data-hint="Plugin management requires admin role - contact your administrator if you need plugin access">
  Manage plugins (admin required)
</li>
```

#### Progressive Error Handling
```html
<!-- Try automatic fix first -->
<li class="interactive" 
    data-targetaction="highlight" 
    data-reftarget="a[href='/connections']"
    data-requirements="navmenu-open,exists-reftarget">
  <!-- System will auto-fix navigation if closed -->
  Click Connections in navigation
</li>

<!-- Manual alternative if auto-fix fails -->
<li class="interactive" 
    data-targetaction="highlight" 
    data-reftarget="#mega-menu-toggle"
    data-requirements="exists-reftarget"
    data-hint="Manual navigation toggle if auto-fix didn't work">
  <span class="interactive-comment">
    If the navigation menu didn't open automatically, click the <strong>menu toggle</strong> 
    button to open it manually.
  </span>
  Manually open navigation menu if needed
</li>
```

## Browser and Environment Issues

### Cross-Browser Compatibility

#### Safari-Specific Issues
```html
<!-- Safari has different button text handling -->
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="Save"
    data-requirements="exists-reftarget"
    data-hint="Uses exact text matching for cross-browser compatibility">
  Save changes
</li>

<!-- Fallback with selector -->
<li class="interactive" 
    data-targetaction="highlight" 
    data-reftarget="button[data-testid='save-button']"
    data-requirements="exists-reftarget">
  Save using attribute selector
</li>
```

#### Mobile and Tablet Considerations
```html
<!-- Touch-friendly interactions -->
<li class="interactive" 
    data-targetaction="highlight" 
    data-reftarget="button[data-testid='mobile-menu']"
    data-requirements="exists-reftarget"
    data-hint="Mobile navigation might use different menu structure">
  Access mobile navigation menu
</li>
```

### Theme and Styling Issues

#### Dark vs Light Theme
```html
<!-- Theme-agnostic selectors -->
<li class="interactive" 
    data-targetaction="highlight" 
    data-reftarget="button[data-testid='theme-toggle']"
    data-requirements="exists-reftarget"
    data-doit="false">
  <span class="interactive-comment">
    The <strong>theme toggle</strong> switches between light and dark modes. 
    All interactive tutorials work in both themes using <code>stable selectors</code> 
    that don't depend on theme-specific styling.
  </span>
  Notice the theme toggle option
</li>
```

## Version Compatibility Issues

### Grafana Version Differences

#### Version-Specific Features
```html
<!-- Modern Grafana features -->
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="New scene"
    data-requirements="min-version:9.0.0,exists-reftarget"
    data-skippable="true"
    data-hint="Scenes feature requires Grafana 9.0+">
  Use new scenes feature
</li>

<!-- Fallback for older versions -->
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="Create dashboard"
    data-requirements="exists-reftarget">
  Create dashboard using standard interface
</li>
```

#### API Compatibility
```html
<!-- Check for API availability -->
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="Query library"
    data-requirements="has-feature:queryLibrary,min-version:8.5.0,exists-reftarget"
    data-skippable="true"
    data-hint="Query library requires specific Grafana version and feature toggle">
  Access query library
</li>
```

### Plugin Compatibility
```html
<!-- Plugin version dependencies -->
<li class="interactive" 
    data-targetaction="navigate" 
    data-reftarget="/a/plugin-app/"
    data-requirements="has-plugin:plugin-id,min-version:9.0.0"
    data-skippable="true"
    data-hint="Plugin requires compatible Grafana version">
  Use plugin features
</li>
```

## Complex Workflow Edge Cases

### Multi-Step Failures

#### Problem: Mid-Sequence Failures
**Cause**: One action in multistep fails, leaving partial state
**Solution**: Include requirements for each internal action

```html
<li class="interactive" data-targetaction="multistep" data-requirements="on-page:/dashboard/new">
  <!-- Each span can have its own requirements -->
  <span class="interactive" 
        data-targetaction="button" 
        data-reftarget="Add visualization"
        data-requirements="exists-reftarget"></span>
  <span class="interactive" 
        data-targetaction="button" 
        data-reftarget="prometheus-datasource"
        data-requirements="has-datasource:prometheus"></span>
  <span class="interactive" 
        data-targetaction="formfill" 
        data-reftarget="textarea[data-testid='query-editor']"
        data-targetvalue="up"
        data-requirements="exists-reftarget"></span>
  Add visualization, select data source, enter query
</li>
```

#### Problem: Section Execution Interruption
**Cause**: User cancels section execution or browser/tab closes
**Solution**: System provides resume functionality automatically

```html
<!-- Section automatically resumes from last completed step -->
<span id="long-workflow" 
      class="interactive" 
      data-targetaction="sequence"
      data-reftarget="span#long-workflow"
      data-hint="Progress saved automatically - can resume if interrupted">
  <!-- Steps will resume from where user left off -->
</span>
```

### State Synchronization Issues

#### Problem: External State Changes
**Cause**: User makes changes outside tutorial that affect requirements
**Solution**: Use live requirement monitoring and reactive checks

```html
<!-- Requirements automatically recheck when DOM changes -->
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="Edit panel"
    data-requirements="exists-reftarget,on-page:/dashboard"
    data-hint="Requirements automatically recheck if user navigates">
  Edit the panel
</li>
```

#### Problem: Concurrent User Actions
**Cause**: User performs actions while tutorial is running
**Solution**: Use section blocking and cancellation

```html
<!-- Section blocks other interactions during execution -->
<span id="atomic-workflow" 
      class="interactive" 
      data-targetaction="sequence"
      data-reftarget="span#atomic-workflow"
      data-hint="Blocks other interactions during execution for consistency">
  <!-- Steps execute without interference -->
</span>
```

## Data Consistency Issues

### Data Source State Issues

#### Problem: Data Source Configuration Drift
**Cause**: Data source settings change after tutorial creation
**Solution**: Use type-based requirements instead of name-based

```html
<!-- Bad: Relies on specific name -->
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="my-prometheus"
    data-requirements="has-datasource:my-prometheus">
  Select my prometheus data source
</li>

<!-- Good: Uses type for flexibility -->
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="prometheus"
    data-requirements="has-datasource:type:prometheus"
    data-hint="Works with any Prometheus data source">
  Select any Prometheus data source
</li>
```

#### Problem: Missing Test Data
**Cause**: Tutorial assumes specific metrics/logs exist
**Solution**: Use generic queries that work with minimal data

```html
<!-- Good: Uses universal Prometheus metric -->
<li class="interactive" 
    data-targetaction="formfill" 
    data-reftarget="textarea[data-testid='query-editor']"
    data-targetvalue="up"
    data-requirements="has-datasource:prometheus,exists-reftarget"
    data-hint="'up' metric exists on all Prometheus instances">
  Enter universal monitoring query
</li>

<!-- Avoid: Specific application metrics -->
<li class="interactive" 
    data-targetaction="formfill" 
    data-reftarget="textarea[data-testid='query-editor']"
    data-targetvalue="my_custom_app_requests_total"
    data-hint="Might not exist in all environments">
  Enter application-specific query
</li>
```

## Accessibility and Usability Edge Cases

### Screen Reader Compatibility
```html
<!-- Include helpful hints for screen readers -->
<li class="interactive" 
    data-targetaction="highlight" 
    data-reftarget="button[data-testid='save']"
    data-requirements="exists-reftarget"
    data-hint="Save button - preserves your dashboard configuration">
  Save your dashboard
</li>

<!-- Use ARIA attributes in selectors when available -->
<li class="interactive" 
    data-targetaction="formfill" 
    data-reftarget="input[aria-label='Dashboard title']"
    data-targetvalue="My Dashboard"
    data-requirements="exists-reftarget">
  Set dashboard title
</li>
```

### Keyboard Navigation
```html
<!-- Ensure interactive elements are keyboard accessible -->
<li class="interactive" 
    data-targetaction="highlight" 
    data-reftarget="button[data-testid='save'][tabindex='0']"
    data-requirements="exists-reftarget"
    data-hint="Accessible via keyboard navigation">
  Save dashboard (keyboard accessible)
</li>
```

## Testing and Validation Edge Cases

### Automated Testing Considerations
```html
<!-- Include test-friendly attributes -->
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="Save dashboard"
    data-requirements="exists-reftarget"
    data-hint="Uses button text for reliable automated testing">
  Save dashboard
</li>

<!-- Alternative with test ID -->
<li class="interactive" 
    data-targetaction="highlight" 
    data-reftarget="button[data-testid='save-dashboard-btn']"
    data-requirements="exists-reftarget">
  Save dashboard using test ID
</li>
```

### Load Testing Considerations
```html
<!-- Handle high-latency environments -->
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="Load dashboard"
    data-requirements="exists-reftarget"
    data-hint="May take longer in high-latency environments">
  Load dashboard (may take time)
</li>

<!-- Include verification for slow operations -->
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="Save & test"
    data-requirements="exists-reftarget"
    data-verify="has-datasource:prometheus"
    data-hint="Verification confirms operation completed successfully">
  Save and test (with verification)
</li>
```

## Debugging Tools and Techniques

### Browser Console Debugging
```javascript
// Check if selector works
document.querySelector("button[data-testid='save']");

// Test requirement checking
const testRequirement = async (req) => {
  const checker = await import('./requirements-checker.utils');
  const result = await checker.checkRequirements({
    requirements: req,
    targetAction: 'button',
    refTarget: 'test'
  });
  console.log(result);
};

// Test specific requirements
testRequirement('has-datasource:prometheus');
testRequirement('is-admin');

// Check current user state
console.log('User:', window.grafanaBootData?.user);
console.log('Features:', window.grafanaBootData?.settings?.featureToggles);
```

### Development Mode Features
```javascript
// Enable debug logging
localStorage.setItem('grafana-docs-debug', 'true');

// Check interactive element state
const manager = window.SequentialRequirementsManager?.getInstance();
if (manager) {
  manager.logCurrentState();
}

// Monitor requirement changes
document.addEventListener('interactive-action-completed', (e) => {
  console.log('Action completed:', e.detail);
});
```

### Common Debug Scenarios

#### "Requirements never pass"
1. Check browser console for error messages
2. Verify requirement syntax exactly matches reference
3. Test individual requirements in isolation
4. Check if required data/state actually exists

#### "Element not found"
1. Verify selector in browser console
2. Check if element exists in current page state
3. Ensure navigation requirements are met
4. Try alternative selectors

#### "Action doesn't execute"
1. Check if requirements are met
2. Verify element is clickable/interactable
3. Check browser console for JavaScript errors
4. Test action manually to verify it's possible

#### "Tutorial gets stuck"
1. Check for JavaScript errors in console
2. Verify network connectivity for API-dependent requirements
3. Clear localStorage to reset section progress
4. Check if user permissions changed

### Recovery Procedures

#### Reset Tutorial State
```javascript
// Clear all tutorial progress
Object.keys(localStorage)
  .filter(key => key.startsWith('docsPlugin:completedSteps:'))
  .forEach(key => localStorage.removeItem(key));

// Reload page to restart
window.location.reload();
```

#### Skip Problematic Steps
```html
<!-- Make problematic steps skippable -->
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="Problematic action"
    data-requirements="complex-requirement"
    data-skippable="true"
    data-hint="Skip if experiencing issues">
  Perform action (skippable if problems)
</li>
```

#### Provide Manual Alternatives
```html
<!-- Automated approach -->
<li class="interactive" 
    data-targetaction="multistep" 
    data-skippable="true">
  <span class="interactive" data-targetaction="navigate" data-reftarget="/setup"></span>
  <span class="interactive" data-targetaction="button" data-reftarget="Auto configure"></span>
  Use automatic configuration
</li>

<!-- Manual fallback -->
<li class="interactive" 
    data-targetaction="navigate" 
    data-reftarget="/manual-setup">
  Or configure manually step-by-step
</li>
```# Edge Cases and Troubleshooting for AI

## Common Edge Cases

### DOM Timing Issues

#### Problem: Element Not Found
**Cause**: Interactive action executes before DOM element is rendered
**Solution**: Include appropriate requirements and verification

```html
<!-- Bad: No existence check -->
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="Save dashboard">
  Save dashboard
</li>

<!-- Good: Includes existence check -->
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="Save dashboard"
    data-requirements="exists-reftarget,on-page:/dashboard/edit">
  Save dashboard
</li>
```

#### Problem: Navigation Menu Not Open
**Cause**: Trying to interact with navigation elements when menu is closed
**Solution**: Always include `navmenu-open` requirement for nav interactions

```html
<!-- Bad: Navigation element without menu requirement -->
<li class="interactive" 
    data-targetaction="highlight" 
    data-reftarget="a[href='/connections']">
  Click Connections
</li>

<!-- Good: Includes navigation requirement -->
<li class="interactive" 
    data-targetaction="highlight" 
    data-reftarget="a[href='/connections']"
    data-requirements="navmenu-open,exists-reftarget">
  Click Connections
</li>
```

### Permission and Access Issues

#### Problem: Admin Actions for Non-Admin Users
**Cause**: Tutorial requires admin permissions but user doesn't have them
**Solution**: Make admin steps skippable or provide alternative paths

```html
<!-- Option 1: Make skippable -->
<li class="interactive" 
    data-targetaction="navigate" 
    data-reftarget="/admin/plugins"
    data-requirements="is-admin"
    data-skippable="true"
    data-hint="Admin access required - skip if you don't have permissions">
  Access plugin management (admin only)
</li>

<!-- Option 2: Provide alternative -->
<li class="interactive" 
    data-targetaction="highlight" 
    data-reftarget="div[data-testid='plugin-catalog']"
    data-requirements="has-role:viewer"
    data-doit="false">
  <span class="interactive-comment">
    You can browse plugins here, but <strong>installation requires admin privileges</strong>. 
    Contact your administrator to request plugin installations.
  </span>
  Browse available plugins (view-only)
</li>
```

#### Problem: Data Source Dependencies
**Cause**: Tutorial assumes specific data source exists
**Solution**: Use objectives for auto-completion or include setup sections

```html
<!-- Option 1: Auto-complete if exists -->
<span id="setup-prometheus" 
      class="interactive" 
      data-targetaction="sequence"
      data-objectives="has-datasource:type:prometheus"
      data-hint="Skips if Prometheus already configured">
  <!-- Setup steps only run if Prometheus not configured -->
</span>

<!-- Option 2: Check before dependent actions -->
<li class="interactive" 
    data-targetaction="formfill" 
    data-reftarget="textarea[data-testid='query-editor']"
    data-targetvalue="up"
    data-requirements="has-datasource:prometheus,exists-reftarget">
  Enter Prometheus query
</li>
```

### Form Interaction Issues

#### Problem: React Controlled Inputs
**Cause**: React controlled inputs don't update with simple value assignment
**Solution**: System handles this automatically, but verify with `data-verify`

```html
<!-- Good: Includes verification -->
<li class="interactive" 
    data-targetaction="formfill" 
    data-reftarget="input[data-testid='dashboard-title']"
    data-targetvalue="My Dashboard"
    data-requirements="exists-reftarget"
    data-verify="has-dashboard-named:My Dashboard">
  Set dashboard title
</li>
```

#### Problem: ARIA Combobox Complexity
**Cause**: ARIA comboboxes require special tokenization and event handling
**Solution**: Use formfill action - system handles tokenization automatically

```html
<!-- Complex query tokenization handled automatically -->
<li class="interactive" 
    data-targetaction="formfill" 
    data-reftarget="input[role='combobox'][aria-autocomplete='list']"
    data-targetvalue='job="prometheus" level="error"'
    data-requirements="exists-reftarget,on-page:/explore">
  Filter logs by job and level
</li>
```

#### Problem: Monaco Editor Special Handling
**Cause**: Monaco editors need special event handling for React integration
**Solution**: System detects Monaco editors automatically

```html
<!-- Monaco editor automatically detected by CSS classes -->
<li class="interactive" 
    data-targetaction="formfill" 
    data-reftarget="textarea.inputarea.monaco-mouse-cursor-text"
    data-targetvalue="rate(http_requests_total[5m])"
    data-requirements="exists-reftarget">
  Enter PromQL query
</li>
```

### Navigation and Routing Issues

#### Problem: SPA Navigation Timing
**Cause**: Navigation completes but target page content not yet loaded
**Solution**: Use verification to confirm page content is ready

```html
<!-- Good: Verifies navigation completed -->
<li class="interactive" 
    data-targetaction="navigate" 
    data-reftarget="/dashboard/new"
    data-requirements="has-datasources"
    data-verify="on-page:/dashboard/new,exists-reftarget">
  Navigate to create dashboard
</li>

<!-- Follow-up action waits for page content -->
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="Add visualization"
    data-requirements="exists-reftarget,on-page:/dashboard/new">
  Add your first panel
</li>
```

#### Problem: External URL Handling
**Cause**: External URLs might be blocked by browser security
**Solution**: Use navigate action - system opens in new tab safely

```html
<!-- External URLs handled automatically -->
<li class="interactive" 
    data-targetaction="navigate" 
    data-reftarget="https://grafana.com/docs/"
    data-hint="Opens documentation in new tab">
  View Grafana documentation
</li>
```

## Troubleshooting Patterns

### Debugging Failed Requirements

#### Network/API Issues
```html
<!-- Include fallback for network failures -->
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="Test connection"
    data-requirements="exists-reftarget"
    data-skippable="true"
    data-hint="Skip if network connectivity issues">
  Test data source connection (skip if network issues)
</li>
```

#### Plugin Availability Issues
```html
<!-- Handle missing plugins gracefully -->
<li class="interactive" 
    data-targetaction="navigate" 
    data-reftarget="/a/custom-plugin/"
    data-requirements="has-plugin:custom-plugin"
    data-skippable="true"
    data-hint="Requires custom plugin - skip if not installed">
  Use custom plugin features
</li>

<!-- Alternative without plugin -->
<li class="interactive" 
    data-targetaction="navigate" 
    data-reftarget="/dashboards"
    data-hint="Standard dashboards work without additional plugins">
  Use standard Grafana dashboards instead
</li>
```

### Selector Reliability Issues

#### Problem: Element Selector Changes
**Cause**: Grafana UI updates change DOM structure or attributes
**Solution**: Use multiple fallback selectors and stable attributes

```html
<!-- Primary selector with fallbacks -->
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="Save dashboard"
    data-requirements="exists-reftarget">
  Save dashboard
</li>

<!-- If button text changes, use attribute selector -->
<li class="interactive" 
    data-targetaction="highlight" 
    data-reftarget="button[data-testid='save-dashboard']"
    data-requirements="exists-reftarget">
  Save dashboard using stable selector
</li>
```

#### Problem: Multiple Element Matches
**Cause**: Selector matches multiple elements when only one intended
**Solution**: Use more specific selectors or pseudo-selectors

```html
<!-- Bad: Might match multiple panels -->
<li class="interactive" 
    data-targetaction="highlight" 
    data-reftarget="div[data-testid='panel']">
  Edit panel
</li>

<!-- Good: Targets specific panel -->
<li class="interactive" 
    data-targetaction="highlight" 
    data-reftarget="div[data-testid='panel']:first-of-type">
  Edit the first panel
</li>

<!-- Better: Use unique identifier if available -->
<li class="interactive" 
    data-targetaction="highlight" 
    data-reftarget="div[data-panel-id='panel-1']">
  Edit panel 1
</li>
```

### Sequential Flow Issues

#### Problem: Steps Out of Order
**Cause**: User completes steps manually outside tutorial flow
**Solution**: Use objectives to handle already-completed states

```html
<!-- Auto-complete if already done -->
<li class="interactive" 
    data-targetaction="formfill" 
    data-reftarget="input[id='datasource-name']"
    data-targetvalue="prometheus"
    data-objectives="has-datasource:prometheus"
    data-requirements="exists-reftarget">
  Name your data source
</li>
```

#### Problem: Section Dependencies
**Cause**: User tries to do section 2 before completing section 1
**Solution**: Use section-completed requirements

```html
<span id="section-2" 
      class="interactive" 
      data-targetaction="sequence"
      data-requirements="section-completed:section-1"
      data-hint="Complete the previous section first">
  <!-- Section 2 content -->
</span>
```

### Performance and Scalability Issues

#### Problem: Too Many Requirements Checks
**Cause**: Complex requirements causing performance issues
**Solution**: Group related requirements and use caching

```html
<!-- Good: Grouped related requirements -->
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="Create dashboard"
    data-requirements="has-datasources,has-role:editor,on-page:/dashboards"
    data-hint="Groups related checks efficiently">
  Create new dashboard
</li>

<!-- Bad: Separate similar checks -->
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="Create dashboard"
    data-requirements="has-datasource:prometheus">
  Step 1
</li>
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="Save dashboard"
    data-requirements="has-datasource:prometheus">
  Step 2 (redundant check)
</li>
```

#### Problem: Expensive State Checks
**Cause**: Requirements that make expensive API calls
**Solution**: Use objectives for expensive checks that auto-complete

```html
<!-- Use objective for expensive dashboard search -->
<span id="create-dashboard" 
      class="interactive" 
      data-targetaction="sequence"
      data-objectives="has-dashboard-named:Monitoring Dashboard"
      data-hint="Skips creation if dashboard already exists">
  <!-- Creation steps -->
</span>
```

## Error Recovery Strategies

### Graceful Degradation Patterns

#### Network Connectivity Issues
```html
<!-- Primary action with network dependency -->
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="Test connection"
    data-requirements="exists-reftarget"
    data-skippable="true"
    data-hint="Skip if experiencing network connectivity issues">
  Test data source connection
</li>

<!-- Offline alternative -->
<li class="interactive" 
    data-targetaction="highlight" 
    data-reftarget="div[data-testid='connection-status']"
    data-doit="false">
  <span class="interactive-comment">
    If connection testing fails, check your <strong>network connectivity</strong> 
    and <strong>firewall settings</strong>. You can still configure the data source 
    and test the connection later.
  </span>
  Review connection status information
</li>
```

#### Missing Feature Fallbacks
```html
<!-- Modern feature with fallback -->
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="Use query library"
    data-requirements="has-feature:queryLibrary,exists-reftarget"
    data-skippable="true"
    data-hint="Query library feature - skip if not available">
  Use query library (if available)
</li>

<!-- Traditional approach -->
<li class="interactive" 
    data-targetaction="formfill" 
    data-reftarget="textarea[data-testid='query-editor']"
    data-targetvalue="rate(http_requests_total[5m])"
    data-requirements="exists-reftarget">
  Or enter query manually in editor
</li>
```

### Error Message Patterns

#### Helpful Error Messages
```html
<!-- Clear explanation with context -->
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="Create alert"
    data-requirements="has-datasource:prometheus,has-permission:alerting:write"
    data-hint="Requires Prometheus data source and alerting permissions to create alert rules">
  Create monitoring alert
</li>

<!-- Specific guidance for resolution -->
<li class="interactive" 
    data-targetaction="navigate" 
    data-reftarget="/admin/plugins"
    data-requirements="is-admin"
    data-skippable="true"
    data-hint="Plugin management requires admin role - contact your administrator if you need plugin access">
  Manage plugins (admin required)
</li>
```

#### Progressive Error Handling
```html
<!-- Try automatic fix first -->
<li class="interactive" 
    data-targetaction="highlight" 
    data-reftarget="a[href='/connections']"
    data-requirements="navmenu-open,exists-reftarget">
  <!-- System will auto-fix navigation if closed -->
  Click Connections in navigation
</li>

<!-- Manual alternative if auto-fix fails -->
<li class="interactive" 
    data-targetaction="highlight" 
    data-reftarget="#mega-menu-toggle"
    data-requirements="exists-reftarget"
    data-hint="Manual navigation toggle if auto-fix didn't work">
  <span class="interactive-comment">
    If the navigation menu didn't open automatically, click the <strong>menu toggle</strong> 
    button to open it manually.
  </span>
  Manually open navigation menu if needed
</li>
```

## Browser and Environment Issues

### Cross-Browser Compatibility

#### Safari-Specific Issues
```html
<!-- Safari has different button text handling -->
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="Save"
    data-requirements="exists-reftarget"
    data-hint="Uses exact text matching for cross-browser compatibility">
  Save changes
</li>

<!-- Fallback with selector -->
<li class="interactive" 
    data-targetaction="highlight" 
    data-reftarget="button[data-testid='save-button']"
    data-requirements="exists-reftarget">
  Save using attribute selector
</li>
```

#### Mobile and Tablet Considerations
```html
<!-- Touch-friendly interactions -->
<li class="interactive" 
    data-targetaction="highlight" 
    data-reftarget="button[data-testid='mobile-menu']"
    data-requirements="exists-reftarget"
    data-hint="Mobile navigation might use different menu structure">
  Access mobile navigation menu
</li>
```

### Theme and Styling Issues

#### Dark vs Light Theme
```html
<!-- Theme-agnostic selectors -->
<li class="interactive" 
    data-targetaction="highlight" 
    data-reftarget="button[data-testid='theme-toggle']"
    data-requirements="exists-reftarget"
    data-doit="false">
  <span class="interactive-comment">
    The <strong>theme toggle</strong> switches between light and dark modes. 
    All interactive tutorials work in both themes using <code>stable selectors</code> 
    that don't depend on theme-specific styling.
  </span>
  Notice the theme toggle option
</li>
```

## Version Compatibility Issues

### Grafana Version Differences

#### Version-Specific Features
```html
<!-- Modern Grafana features -->
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="New scene"
    data-requirements="min-version:9.0.0,exists-reftarget"
    data-skippable="true"
    data-hint="Scenes feature requires Grafana 9.0+">
  Use new scenes feature
</li>

<!-- Fallback for older versions -->
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="Create dashboard"
    data-requirements="exists-reftarget">
  Create dashboard using standard interface
</li>
```

#### API Compatibility
```html
<!-- Check for API availability -->
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="Query library"
    data-requirements="has-feature:queryLibrary,min-version:8.5.0,exists-reftarget"
    data-skippable="true"
    data-hint="Query library requires specific Grafana version and feature toggle">
  Access query library
</li>
```

### Plugin Compatibility
```html
<!-- Plugin version dependencies -->
<li class="interactive" 
    data-targetaction="navigate" 
    data-reftarget="/a/plugin-app/"
    data-requirements="has-plugin:plugin-id,min-version:9.0.0"
    data-skippable="true"
    data-hint="Plugin requires compatible Grafana version">
  Use plugin features
</li>
```

## Complex Workflow Edge Cases

### Multi-Step Failures

#### Problem: Mid-Sequence Failures
**Cause**: One action in multistep fails, leaving partial state
**Solution**: Include requirements for each internal action

```html
<li class="interactive" data-targetaction="multistep" data-requirements="on-page:/dashboard/new">
  <!-- Each span can have its own requirements -->
  <span class="interactive" 
        data-targetaction="button" 
        data-reftarget="Add visualization"
        data-requirements="exists-reftarget"></span>
  <span class="interactive" 
        data-targetaction="button" 
        data-reftarget="prometheus-datasource"
        data-requirements="has-datasource:prometheus"></span>
  <span class="interactive" 
        data-targetaction="formfill" 
        data-reftarget="textarea[data-testid='query-editor']"
        data-targetvalue="up"
        data-requirements="exists-reftarget"></span>
  Add visualization, select data source, enter query
</li>
```

#### Problem: Section Execution Interruption
**Cause**: User cancels section execution or browser/tab closes
**Solution**: System provides resume functionality automatically

```html
<!-- Section automatically resumes from last completed step -->
<span id="long-workflow" 
      class="interactive" 
      data-targetaction="sequence"
      data-reftarget="span#long-workflow"
      data-hint="Progress saved automatically - can resume if interrupted">
  <!-- Steps will resume from where user left off -->
</span>
```

### State Synchronization Issues

#### Problem: External State Changes
**Cause**: User makes changes outside tutorial that affect requirements
**Solution**: Use live requirement monitoring and reactive checks

```html
<!-- Requirements automatically recheck when DOM changes -->
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="Edit panel"
    data-requirements="exists-reftarget,on-page:/dashboard"
    data-hint="Requirements automatically recheck if user navigates">
  Edit the panel
</li>
```

#### Problem: Concurrent User Actions
**Cause**: User performs actions while tutorial is running
**Solution**: Use section blocking and cancellation

```html
<!-- Section blocks other interactions during execution -->
<span id="atomic-workflow" 
      class="interactive" 
      data-targetaction="sequence"
      data-reftarget="span#atomic-workflow"
      data-hint="Blocks other interactions during execution for consistency">
  <!-- Steps execute without interference -->
</span>
```

## Data Consistency Issues

### Data Source State Issues

#### Problem: Data Source Configuration Drift
**Cause**: Data source settings change after tutorial creation
**Solution**: Use type-based requirements instead of name-based

```html
<!-- Bad: Relies on specific name -->
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="my-prometheus"
    data-requirements="has-datasource:my-prometheus">
  Select my prometheus data source
</li>

<!-- Good: Uses type for flexibility -->
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="prometheus"
    data-requirements="has-datasource:type:prometheus"
    data-hint="Works with any Prometheus data source">
  Select any Prometheus data source
</li>
```

#### Problem: Missing Test Data
**Cause**: Tutorial assumes specific metrics/logs exist
**Solution**: Use generic queries that work with minimal data

```html
<!-- Good: Uses universal Prometheus metric -->
<li class="interactive" 
    data-targetaction="formfill" 
    data-reftarget="textarea[data-testid='query-editor']"
    data-targetvalue="up"
    data-requirements="has-datasource:prometheus,exists-reftarget"
    data-hint="'up' metric exists on all Prometheus instances">
  Enter universal monitoring query
</li>

<!-- Avoid: Specific application metrics -->
<li class="interactive" 
    data-targetaction="formfill" 
    data-reftarget="textarea[data-testid='query-editor']"
    data-targetvalue="my_custom_app_requests_total"
    data-hint="Might not exist in all environments">
  Enter application-specific query
</li>
```

## Accessibility and Usability Edge Cases

### Screen Reader Compatibility
```html
<!-- Include helpful hints for screen readers -->
<li class="interactive" 
    data-targetaction="highlight" 
    data-reftarget="button[data-testid='save']"
    data-requirements="exists-reftarget"
    data-hint="Save button - preserves your dashboard configuration">
  Save your dashboard
</li>

<!-- Use ARIA attributes in selectors when available -->
<li class="interactive" 
    data-targetaction="formfill" 
    data-reftarget="input[aria-label='Dashboard title']"
    data-targetvalue="My Dashboard"
    data-requirements="exists-reftarget">
  Set dashboard title
</li>
```

### Keyboard Navigation
```html
<!-- Ensure interactive elements are keyboard accessible -->
<li class="interactive" 
    data-targetaction="highlight" 
    data-reftarget="button[data-testid='save'][tabindex='0']"
    data-requirements="exists-reftarget"
    data-hint="Accessible via keyboard navigation">
  Save dashboard (keyboard accessible)
</li>
```

## Testing and Validation Edge Cases

### Automated Testing Considerations
```html
<!-- Include test-friendly attributes -->
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="Save dashboard"
    data-requirements="exists-reftarget"
    data-hint="Uses button text for reliable automated testing">
  Save dashboard
</li>

<!-- Alternative with test ID -->
<li class="interactive" 
    data-targetaction="highlight" 
    data-reftarget="button[data-testid='save-dashboard-btn']"
    data-requirements="exists-reftarget">
  Save dashboard using test ID
</li>
```

### Load Testing Considerations
```html
<!-- Handle high-latency environments -->
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="Load dashboard"
    data-requirements="exists-reftarget"
    data-hint="May take longer in high-latency environments">
  Load dashboard (may take time)
</li>

<!-- Include verification for slow operations -->
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="Save & test"
    data-requirements="exists-reftarget"
    data-verify="has-datasource:prometheus"
    data-hint="Verification confirms operation completed successfully">
  Save and test (with verification)
</li>
```

## Debugging Tools and Techniques

### Browser Console Debugging
```javascript
// Check if selector works
document.querySelector("button[data-testid='save']");

// Test requirement checking
const testRequirement = async (req) => {
  const checker = await import('./requirements-checker.utils');
  const result = await checker.checkRequirements({
    requirements: req,
    targetAction: 'button',
    refTarget: 'test'
  });
  console.log(result);
};

// Test specific requirements
testRequirement('has-datasource:prometheus');
testRequirement('is-admin');

// Check current user state
console.log('User:', window.grafanaBootData?.user);
console.log('Features:', window.grafanaBootData?.settings?.featureToggles);
```

### Development Mode Features
```javascript
// Enable debug logging
localStorage.setItem('grafana-docs-debug', 'true');

// Check interactive element state
const manager = window.SequentialRequirementsManager?.getInstance();
if (manager) {
  manager.logCurrentState();
}

// Monitor requirement changes
document.addEventListener('interactive-action-completed', (e) => {
  console.log('Action completed:', e.detail);
});
```

### Common Debug Scenarios

#### "Requirements never pass"
1. Check browser console for error messages
2. Verify requirement syntax exactly matches reference
3. Test individual requirements in isolation
4. Check if required data/state actually exists

#### "Element not found"
1. Verify selector in browser console
2. Check if element exists in current page state
3. Ensure navigation requirements are met
4. Try alternative selectors

#### "Action doesn't execute"
1. Check if requirements are met
2. Verify element is clickable/interactable
3. Check browser console for JavaScript errors
4. Test action manually to verify it's possible

#### "Tutorial gets stuck"
1. Check for JavaScript errors in console
2. Verify network connectivity for API-dependent requirements
3. Clear localStorage to reset section progress
4. Check if user permissions changed

### Recovery Procedures

#### Reset Tutorial State
```javascript
// Clear all tutorial progress
Object.keys(localStorage)
  .filter(key => key.startsWith('docsPlugin:completedSteps:'))
  .forEach(key => localStorage.removeItem(key));

// Reload page to restart
window.location.reload();
```

#### Skip Problematic Steps
```html
<!-- Make problematic steps skippable -->
<li class="interactive" 
    data-targetaction="button" 
    data-reftarget="Problematic action"
    data-requirements="complex-requirement"
    data-skippable="true"
    data-hint="Skip if experiencing issues">
  Perform action (skippable if problems)
</li>
```

#### Provide Manual Alternatives
```html
<!-- Automated approach -->
<li class="interactive" 
    data-targetaction="multistep" 
    data-skippable="true">
  <span class="interactive" data-targetaction="navigate" data-reftarget="/setup"></span>
  <span class="interactive" data-targetaction="button" data-reftarget="Auto configure"></span>
  Use automatic configuration
</li>

<!-- Manual fallback -->
<li class="interactive" 
    data-targetaction="navigate" 
    data-reftarget="/manual-setup">
  Or configure manually step-by-step
</li>
```