---
alwaysApply: true
description: help is available on writing good guides through best practices for authorship.
---

## Best Practices

The following best practices are oriented around the idea of defensive 
design. Interactive tutorials are written to make it easy for beginners
and those without expert knowledge. As such, they cannot be allowed to fail.
Complexity is bad, unmet requirements mean confusion, which is the opposite
of the intent.  All best practices are orienting around creating interactive
guides which are simple, clear, and robust, meaning it is difficult or
impossible to get the tutorial into a broken state.

### Keep prose very brief

Interactive guides are displayed in a right-hand sidebar. Paragraphs of text are bad, because they
scroll the display vertically. Tutorials shine when they're very direct and punchy action-oriented
language, not discourse & concepts. Rely on links for concepts.

### Include requirements wherever possible

* Every DOM interaction needs exists-reftarget
* Navigation elements need navmenu-open
* Page-specific actions need on-page:/path
* Be aware of what roles a given feature needs; Admin features need `is-admin` or appropriate role requirements

### Connect Requirements and Objectives

If section 1 has the objective of creating a resource (for example a data source), step 2 should probably 
have the requirement that data source exists.

### Strict Requirements Prevent Breakages

Be aggressive and state as many requirements up front as are reasonably necessary. This guides the user
to fix any missing dependencies, and minimizes the chances they'll go down a broken path they cannot complete.
An example of this is that if step 5 requires admin and can't be skipped, consider promoting the admin requirement
to the top of the section to block starting step 1.

### Use Stable Selectors

* Prefer `data-testid` attributes over CSS classes
* Use button[data-testid='save'] not .btn-primary
* Include fallback selectors for critical elements

### Handle Edge Cases Gracefully

Make admin-only steps data-skippable="true" with helpful hints
Use data-objectives to auto-complete already-done steps
Provide alternative workflows for different user permissions

### Verify State Changes

* Use data-verify for actions that change state
* Include verification after save/create operations
* Check for expected outcomes after navigation

### Write Clear, Actionable Content

* Step descriptions should be action-focused: "Save your dashboard" not "The save button can be clicked"
* Include helpful hints explaining what will happen
* Use interactive comments for complex UI elements

### Structure for Resilience

* Break complex workflows into logical sections
* Use sequence for multi-step processes with dependencies
* Use multistep for related actions that should happen together
* Include section completion requirements for dependencies

### Content Quality

* Keep interactive comments under 250 characters
* Use <strong> for UI elements, <code> for technical terms
* For content between <span class="interactive-comment"></span>, keep to one short sentence. Do not use the name of the element being highlighted by the system. For example, instead of "<span class="interactive-comment">The <strong>Logs</span> menu opens the Logs page", use "<span class="interactive-comment">Click to open the Logs page."</span>
* Use user-centric words like those in the following list:
  * Instead of visualization or card, use panel
  * Instead of menu item, use the name of the menu item. For example, instead of "Click the Logs menu item", write "Click Logs."
  * Instead of navigation menu, use main menu.
  * Instead of dropdown, use menu. For example, instead of "the Data source dropdown", write "the Data source menu"
  * Instead of interface, use page, section, or panel.
  * Avoid using button. For example, instead of "Click the Select button", write "Click Select."
  * Only bold titles or names of items on the GUI. For example, do not use "Click the <strong>Logs tab</strong>." Instead, write "Click the <strong>Logs</strong> tab."
  * Do not use integration or plugin. Find another way to describe what you mean.
  * Instead of "<strong>menu button</strong> (three dots)", use "log menu icon (three dots)".
  * Always include "What you will learn" before each section, and "What you have learned" after each section.
  * If an item is to be clicked, only use "Click". Do not use obscure terms like "navigate to", "examine", or "check out".
* Write user-centric descriptions that match mental models
* Include context about why each step matters

```html
<html>
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>(TUTORIAL NAME GOES HERE))</title>
    </head>
    <body>

        <h1>(TUTORIAL NAME GOES HERE)</h1>

        <p>A 1 sentence description of your tutorial</p>

        <h2>Section: Heading Name</h2>

        <span id="tutorial-name-root"
              class="interactive"
              data-targetaction="sequence"
              data-reftarget="span#tutorial-name-root"
              data-requirements="navmenu-open">
          <ul>
            <li class="interactive"
                data-reftarget="FILL ME OUT"
                data-targetaction='FILL ME OUT'>
               Step 1: User does a thing
            </li>
        </ul>
    </body>
</html>
```

5. Finally, encourage the user to go edit this file, and remind them of the
other commands that you have available.