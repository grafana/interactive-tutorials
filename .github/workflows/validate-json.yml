name: Validate JSON

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  validate-json:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        persist-credentials: false
        submodules: false
      
    - name: Validate index.json
      run: |
        echo "Validating index.json for well-formed JSON..."
        
        # Check if index.json exists
        if [ ! -f "index.json" ]; then
          echo "‚ùå Error: index.json file not found"
          exit 1
        fi
        
        # Validate JSON syntax using python
        python3 -m json.tool index.json > /dev/null
        if [ $? -eq 0 ]; then
          echo "‚úÖ index.json is valid JSON"
        else
          echo "‚ùå Error: index.json contains invalid JSON syntax"
          exit 1
        fi
        
        # Additional validation: check if it's an object with expected structure
        echo "Checking JSON structure..."
        python3 -c "
        import json
        import sys
        
        try:
            with open('index.json', 'r') as f:
                data = json.load(f)
            
            # Check if it's a dictionary
            if not isinstance(data, dict):
                print('‚ùå Error: Root element must be an object')
                sys.exit(1)
            
            # Check if 'rules' key exists
            if 'rules' not in data:
                print('‚ùå Error: Missing required \"rules\" key')
                sys.exit(1)
            
            # Check if 'rules' is a list
            if not isinstance(data['rules'], list):
                print('‚ùå Error: \"rules\" must be an array')
                sys.exit(1)
            
            # Validate each rule has required fields
            required_fields = ['title', 'url', 'description', 'type', 'match']
            for i, rule in enumerate(data['rules']):
                if not isinstance(rule, dict):
                    print(f'‚ùå Error: Rule {i} must be an object')
                    sys.exit(1)
                
                for field in required_fields:
                    if field not in rule:
                        print(f'‚ùå Error: Rule {i} missing required field \"{field}\"')
                        sys.exit(1)
            
            print('‚úÖ JSON structure validation passed')
            print(f'‚úÖ Found {len(data[\"rules\"])} valid rule(s)')
            
        except Exception as e:
            print(f'‚ùå Error during structure validation: {e}')
            sys.exit(1)
        "
        
        echo "üéâ All validations passed! index.json is well-formed and properly structured."
